@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager NavigationManager
@implements IDisposable

<h1>Execute Shell Commands in the Server</h1>

<div class="form-group">
    <label>
        Command:
        <input @bind="shellCommand" size="50" />
    </label>
</div>
<div class="form-group">
    <label>
        Arguments:
        <input @bind="shellArguments" size="50" />
    </label>
</div>
<div class="form-group">
    <label>
        Broadcast Command Result:
        <select @bind="broadcast">
            <option value=@BroadcastType.Caller>@BroadcastType.Caller.ToString()</option>
            <option value=@BroadcastType.All>@BroadcastType.All.ToString()</option>
        </select>
    </label>
</div>
<button class="btn btn-primary" @onclick="RunShell" disabled="@(!IsConnected)">Execute</button>
<button class="btn btn-primary" @onclick="Clear">Clear</button>

<hr>

<ul id="messagesList">
    @foreach (var commandResult in commandResults)
    {
        <li>@commandResult</li>
    }
</ul>

@code {
    private HubConnection hubConnection;
    private List<string> commandResults = new List<string>();
    private string shellCommand;
    private string shellArguments;
    private enum BroadcastType { Caller = 0, All = 1 };
    private BroadcastType broadcast { get; set; } = BroadcastType.Caller;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/shellhub"))
            .Build();

        hubConnection.On<string>("RunShellResponse", (string runShellResponse) =>
        {
            commandResults.Add(runShellResponse);
            StateHasChanged();
        });

        await hubConnection.StartAsync();
    }

    Task RunShell() =>
        hubConnection.SendAsync("RunShell", shellCommand, shellArguments, broadcast.ToString());

    void Clear() =>
        commandResults.Clear();


    public bool IsConnected =>
hubConnection.State == HubConnectionState.Connected;

    public void Dispose()
    {
        _ = hubConnection.DisposeAsync();
    }
}